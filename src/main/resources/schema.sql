create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data clob, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file blob, html_content clob, image blob, type enum ('HTML','PDF'), primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type enum ('ANGRY','LAUGH','LIKE','LOVE','SAD','WOW') not null, primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), category enum ('ASSESSMENT','ASSIGNMENT','LAB','LECTURE','REFERENCE') not null, content TEXT, content_type enum ('ASSESSMENT','ASSIGNMENT','AUDIO','DOCUMENT','TEXT','VIDEO') not null, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, description TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, name varchar(255) not null, description TEXT, status enum ('APPROVED','PENDING','REJECTED') not null, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, name varchar(255) not null, setup TEXT, setup_sql TEXT, level enum ('EASY','HARD','MEDIUM') not null, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('ACTIVE','CANCEL','DEACTIVATE','EXPIRED','FINISH'), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_text TEXT not null, question_type enum ('MCQ','TEXT','TF') not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float(24) not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, note TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, delivery_type enum ('ASSIGNMENT_LAB','CLASS_MEETING','CONCEPT_LECTURE','DELIVERY_TYPE','EXAM','GUIDES_REVIEW','SEMINAR_WORKSHOP','TEST_QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (url_pattern varchar(500) not null, http_method enum ('DELETE','GET','HEAD','OPTIONS','PATCH','POST','PUT','TRACE') not null, primary key (url_pattern, http_method));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (url_pattern, http_method) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data clob, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file blob, html_content clob, image blob, type enum ('HTML','PDF'), primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type enum ('ANGRY','LAUGH','LIKE','LOVE','SAD','WOW') not null, primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), category enum ('ASSESSMENT','ASSIGNMENT','LAB','LECTURE','REFERENCE') not null, content TEXT, content_type enum ('ASSESSMENT','ASSIGNMENT','AUDIO','DOCUMENT','TEXT','VIDEO') not null, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, description TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, name varchar(255) not null, description TEXT, status enum ('APPROVED','PENDING','REJECTED') not null, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, name varchar(255) not null, setup TEXT, setup_sql TEXT, level enum ('EASY','HARD','MEDIUM') not null, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('ACTIVE','CANCEL','DEACTIVATE','EXPIRED','FINISH'), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_text TEXT not null, question_type enum ('MCQ','TEXT','TF') not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float(24) not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, note TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, delivery_type enum ('ASSIGNMENT_LAB','CLASS_MEETING','CONCEPT_LECTURE','DELIVERY_TYPE','EXAM','GUIDES_REVIEW','SEMINAR_WORKSHOP','TEST_QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (url_pattern varchar(500) not null, http_method enum ('DELETE','GET','HEAD','OPTIONS','PATCH','POST','PUT','TRACE') not null, primary key (url_pattern, http_method));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (url_pattern, http_method) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data clob, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file blob, html_content clob, image blob, type enum ('HTML','PDF'), primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type enum ('ANGRY','LAUGH','LIKE','LOVE','SAD','WOW') not null, primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), category enum ('ASSESSMENT','ASSIGNMENT','LAB','LECTURE','REFERENCE') not null, content TEXT, content_type enum ('ASSESSMENT','ASSIGNMENT','AUDIO','DOCUMENT','TEXT','VIDEO') not null, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, description TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, name varchar(255) not null, description TEXT, status enum ('APPROVED','PENDING','REJECTED') not null, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, name varchar(255) not null, setup TEXT, setup_sql TEXT, level enum ('EASY','HARD','MEDIUM') not null, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('ACTIVE','CANCEL','DEACTIVATE','EXPIRED','FINISH'), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_text TEXT not null, question_type enum ('MCQ','TEXT','TF') not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float(24) not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, note TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, delivery_type enum ('ASSIGNMENT_LAB','CLASS_MEETING','CONCEPT_LECTURE','DELIVERY_TYPE','EXAM','GUIDES_REVIEW','SEMINAR_WORKSHOP','TEST_QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (url_pattern varchar(500) not null, http_method enum ('DELETE','GET','HEAD','OPTIONS','PATCH','POST','PUT','TRACE') not null, primary key (url_pattern, http_method));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (url_pattern, http_method) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data oid, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, type varchar(10) check (type in ('PDF','HTML')), cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file oid, html_content oid, image oid, primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type varchar(50) not null check (reaction_type in ('LIKE','LOVE','LAUGH','WOW','SAD','ANGRY')), primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, category varchar(20) not null check (category in ('ASSIGNMENT','LAB','LECTURE','REFERENCE','ASSESSMENT')), content_type varchar(20) not null check (content_type in ('DOCUMENT','TEXT','VIDEO','AUDIO','ASSESSMENT','ASSIGNMENT')), material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), content TEXT, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED','COMPLETED','CANCELLED')), primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, description TEXT, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) not null check (status in ('PENDING','APPROVED','REJECTED')), name varchar(255) not null, description TEXT, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, level varchar(255) not null check (level in ('EASY','MEDIUM','HARD')), name varchar(255) not null, setup TEXT, setup_sql TEXT, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status varchar(20) check (status in ('ACTIVE','DEACTIVATE','CANCEL','FINISH','EXPIRED')), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_type varchar(50) not null check (question_type in ('MCQ','TF','TEXT')), question_text TEXT not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status varchar(20) not null check (status in ('COMPLETED','NOT_COMPLETED')), primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float4 not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, type varchar(50) not null check (type in ('EXAM','QUIZ','ASSIGNMENT','PROJECT','FINAL_THEORY_TEST','FINAL_PRACTICE_TEST','UNKNOWN')), name varchar(255) not null, note TEXT, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, delivery_type varchar(50) not null check (delivery_type in ('SEMINAR_WORKSHOP','GUIDES_REVIEW','TEST_QUIZ','ASSIGNMENT_LAB','CONCEPT_LECTURE','EXAM','CLASS_MEETING','DELIVERY_TYPE','UNKNOWN')), learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (http_method varchar(10) not null check (http_method in ('GET','POST','PUT','DELETE','PATCH','OPTIONS','HEAD','TRACE')), url_pattern varchar(500) not null, primary key (http_method, url_pattern));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (http_method, url_pattern) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
create table answer_option_submissions (is_selected boolean not null, answer_option_id bigint, id bigint generated by default as identity, question_submission_id bigint not null, file_path varchar(500), submit_text varchar(1000), submitted_link varchar(1000), primary key (id));
create table answer_options (is_correct boolean not null, id bigint generated by default as identity, question_id bigint not null, option_text TEXT not null, primary key (id));
create table assessment_attempt_sessions (assessment_attempt_id bigint not null, session_id bigint not null, primary key (assessment_attempt_id, session_id));
create table assessment_attempts (duration_seconds integer not null, is_proctored boolean not null, is_submitted boolean not null, score_assignment float(53), score_quiz float(53), assessment_id bigint not null, attempt_date timestamp(6) not null, id bigint generated by default as identity, user_id bigint not null, email varchar(255), note TEXT, proctoring_data clob, primary key (id));
create table assessment_feedback (is_feedback_completed boolean not null, rating integer not null, assessment_id bigint not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, feedback TEXT not null, primary key (id));
create table assessment_final_scores (score_assignment float(53), score_quiz float(53), score_total float(53), assessment_id bigint not null, created_at timestamp(6) not null, updated_at timestamp(6) not null, user_id bigint not null, primary key (assessment_id, user_id));
create table assessment_programming_exercises (assessment_id bigint not null, programming_exercise_id bigint not null, primary key (assessment_id, programming_exercise_id));
create table assessment_questions (assessment_id bigint not null, question_id bigint not null, primary key (assessment_id, question_id));
create table assessment_types (id bigint generated by default as identity, name varchar(100) not null unique, description TEXT, primary key (id));
create table assessments (assessed_count integer not null, exercise_score_ratio integer not null, invited_count integer not null, qualified_count integer not null, qualify_score integer not null, quiz_score_ratio integer not null, time_limit integer not null, total_score integer not null, assessment_type_id bigint not null, course_id bigint not null, created_at timestamp(6) not null, created_by_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, invited_emails TEXT, primary key (id));
create table categories (id bigint generated by default as identity, tag varchar(255) not null, primary key (id));
create table certificates (is_awarded boolean not null, is_generated boolean not null, awarded_date timestamp(6), course_id bigint not null, id bigint generated by default as identity, user_id bigint not null, cert_id varchar(100) not null unique, description varchar(1000), name varchar(255) not null, share_url varchar(255), certificate_file blob, html_content clob, image blob, type enum ('HTML','PDF'), primary key (id));
create table comment_reactions (comment_id bigint not null, id bigint generated by default as identity, user_id bigint not null, reaction_type enum ('ANGRY','LAUGH','LIKE','LOVE','SAD','WOW') not null, primary key (id));
create table comments (created_at timestamp(6) not null, forum_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, description TEXT not null, primary key (id));
create table course_assessments (weight_percentage integer not null, assessment_id bigint not null, course_id bigint not null, id bigint generated by default as identity, section_id bigint, primary key (id));
create table course_materials (expected_duration integer not null, order_num integer not null, published boolean not null, word_count integer, course_id bigint not null, id bigint generated by default as identity, parent_material_id bigint, section_id bigint, material_uid varchar(100) not null unique, url varchar(500), name varchar(255) not null, title varchar(255), category enum ('ASSESSMENT','ASSIGNMENT','LAB','LECTURE','REFERENCE') not null, content TEXT, content_type enum ('ASSESSMENT','ASSIGNMENT','AUDIO','DOCUMENT','TEXT','VIDEO') not null, primary key (id));
create table course_prerequisites (id bigint not null, prerequisite_id bigint not null);
create table course_tags (id bigint not null, tag_id bigint not null);
create table courses (discount float(53) not null, duration_weeks integer not null, price float(53) not null, published boolean not null, creator_id bigint, date_published timestamp(6), id bigint generated by default as identity, instructor_id bigint, published_at timestamp(6), syllabus_id bigint, code varchar(50) not null unique, language varchar(50), level varchar(50), image_url varchar(500), image varchar(255), name varchar(255) not null, description TEXT, primary key (id));
create table department_users (department_id integer not null, user_id bigint not null, primary key (department_id, user_id));
create table departments (latitude float(53), longitude float(53), progress integer, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, location_id bigint, parent_id bigint, updated_at timestamp(6), updated_by_id bigint, name varchar(255), primary key (id));
create table enrollment_status_history (created_at timestamp(6) not null, enrollment_id bigint not null, id bigint generated by default as identity, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table enrollments (complete_percent float(53), grade float(53), course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('APPROVED','CANCELLED','COMPLETED','PENDING','REJECTED') not null, primary key (id));
create table exams (quantity integer not null, weight integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, description TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table forums (course_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, name varchar(255) not null, description TEXT, status enum ('APPROVED','PENDING','REJECTED') not null, primary key (id));
create table invited_candidates (has_assessed boolean not null, assessment_id bigint not null, expiration_date timestamp(6), id bigint generated by default as identity, invitation_date timestamp(6) not null, email varchar(255) not null, primary key (id));
create table locations (created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6), address TEXT, city varchar(255), country varchar(255), name varchar(255), postal_code varchar(255), primary key (id));
create table material_progresses (completion_date timestamp(6), id bigint generated by default as identity, material_id bigint not null, progress_id bigint not null, section_id bigint, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table module_function_role (module_function_id bigint not null, role_id bigint not null, primary key (module_function_id, role_id));
create table module_function_url_permission (module_function_id bigint not null, http_method varchar(10) not null, url_pattern varchar(500) not null, primary key (module_function_id, http_method, url_pattern));
create table module_functions (module_function_id bigint generated by default as identity, module_id bigint, parent_module_function_id bigint, function_name varchar(255) not null, primary key (module_function_id));
create table module_groups (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, updated_at timestamp(6) not null, updated_by_user_id bigint not null, description TEXT, group_name varchar(255) not null, primary key (id));
create table module_roles (module_id bigint not null, role_id bigint not null, primary key (module_id, role_id));
create table modules (created_at timestamp(6) not null, created_by_user_id bigint not null, id bigint generated by default as identity, module_group_id bigint not null, updated_at timestamp(6) not null, updated_by_user_id bigint, description TEXT, icon varchar(255), name varchar(255) not null, url varchar(255) not null, primary key (id));
create table programming_exercise_categories (category_id bigint not null, exercise_id bigint not null, primary key (category_id, exercise_id));
create table programming_exercise_progresses (is_completed boolean not null, score float(53) not null, assessment_id bigint not null, completion_date timestamp(6), id bigint generated by default as identity, programming_exercise_id bigint not null, progress_id bigint not null, primary key (id));
create table programming_exercise_submissions (score integer, assessment_attempt_id bigint not null, created_at timestamp(6) not null, id bigint generated by default as identity, programming_exercise_id bigint not null, user_id bigint not null, email varchar(255), code TEXT not null, primary key (id));
create table programming_exercises (course_id bigint not null, id bigint generated by default as identity, programming_language_id bigint not null, description TEXT, name varchar(255) not null, setup TEXT, setup_sql TEXT, level enum ('EASY','HARD','MEDIUM') not null, primary key (id));
create table programming_languages (id bigint generated by default as identity, version varchar(20) not null, name varchar(50) not null unique, description TEXT, primary key (id));
create table progresses (completion_percentage float(53) not null, certificate_id bigint unique, completion_date timestamp(6), course_id bigint not null, created_at timestamp(6) not null, deadline timestamp(6), enrollment_date timestamp(6), enrollment_id bigint unique, id bigint generated by default as identity, updated_at timestamp(6) not null, user_id bigint not null, status enum ('ACTIVE','CANCEL','DEACTIVATE','EXPIRED','FINISH'), primary key (id));
create table question_submissions (assessment_attempt_id bigint not null, id bigint generated by default as identity, question_id bigint not null, primary key (id));
create table questions (points integer, id bigint generated by default as identity, quiz_id bigint not null, question_text TEXT not null, question_type enum ('MCQ','TEXT','TF') not null, primary key (id));
create table quiz_progresses (is_completed boolean not null, score float(53) not null, completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, quiz_id bigint not null, primary key (id));
create table quizzes (is_quiz_bank boolean, published boolean, course_id bigint, created_at timestamp(6), created_by_id bigint, id bigint generated by default as identity, section_id bigint, updated_at timestamp(6), description TEXT, title varchar(255) not null, primary key (id));
create table roles (created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, updated_at timestamp(6), updated_by_id bigint, name varchar(255) unique, primary key (id));
create table section_progresses (completion_date timestamp(6), id bigint generated by default as identity, progress_id bigint not null, section_id bigint not null, status enum ('COMPLETED','NOT_COMPLETED') not null, primary key (id));
create table sections (duration_minutes integer not null, order_number integer not null, course_id bigint not null, id bigint generated by default as identity, name varchar(255) not null, primary key (id));
create table session_types (id bigint generated by default as identity, code varchar(50) not null unique, name varchar(100) not null, description TEXT, primary key (id));
create table sessions (created_by_id bigint, end_time timestamp(6), id bigint generated by default as identity, session_type_id bigint not null, start_time timestamp(6) not null, notes varchar(1000), primary key (id));
create table study_log (completed boolean default false, duration float(24) not null, course_material_id bigint, end_time timestamp(6), id bigint generated by default as identity, start_time timestamp(6), student_id bigint, primary key (id));
create table syllabi (is_active boolean not null, is_approved boolean not null, min_avg_mark_to_pass integer not null, created_at timestamp(6) not null, id bigint generated by default as identity, updated_at timestamp(6) not null, version varchar(50), syllabus_code varchar(100) unique, trainees varchar(500), pass_criteria varchar(1000), training_audience varchar(1000), marking TEXT, others TEXT, reference_materials TEXT, retest varchar(255), retest_note TEXT, technical_group varchar(255), technical_requirements TEXT, textbook varchar(255), title varchar(255) not null, trainer varchar(255), training TEXT, waiver_criteria TEXT, description TEXT, primary key (id));
create table syllabus_assessment_templates (quantity integer not null, weight integer not null, id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, note TEXT, type enum ('ASSIGNMENT','EXAM','FINAL_PRACTICE_TEST','FINAL_THEORY_TEST','PROJECT','QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_chapters (id bigint generated by default as identity, syllabus_id bigint not null, name varchar(255) not null, description TEXT, primary key (id));
create table syllabus_section_details (duration_minutes integer not null, id bigint generated by default as identity, section_id bigint not null, learning_objectives TEXT, topic varchar(255) not null, training_format TEXT, training_materials TEXT, delivery_type enum ('ASSIGNMENT_LAB','CLASS_MEETING','CONCEPT_LECTURE','DELIVERY_TYPE','EXAM','GUIDES_REVIEW','SEMINAR_WORKSHOP','TEST_QUIZ','UNKNOWN') not null, primary key (id));
create table syllabus_sections (duration_minutes integer not null, chapter_id bigint not null, id bigint generated by default as identity, title varchar(255) not null, content TEXT, primary key (id));
create table tags (id bigint generated by default as identity, topic_id bigint not null, name varchar(255), primary key (id));
create table test_cases (is_hidden boolean not null, id bigint generated by default as identity, programming_exercise_id bigint not null, expected_output varchar(255) not null, input varchar(255) not null, sql_tag_number TEXT, primary key (id));
create table topics (id bigint generated by default as identity, name varchar(100) not null unique, primary key (id));
create table url_permissions (url_pattern varchar(500) not null, http_method enum ('DELETE','GET','HEAD','OPTIONS','PATCH','POST','PUT','TRACE') not null, primary key (url_pattern, http_method));
create table users (is_first_login boolean, is_locked boolean not null, created_at timestamp(6) not null, created_by_id bigint, id bigint generated by default as identity, role_id bigint, updated_at timestamp(6), updated_by_id bigint, avatar varchar(255), email varchar(255) unique, first_name varchar(255), last_name varchar(255), password varchar(255), student_code varchar(255) unique, username varchar(255) unique, primary key (id));
alter table if exists answer_option_submissions add constraint FKmgwg7tey3r0ro681eo5yaesci foreign key (answer_option_id) references answer_options;
alter table if exists answer_option_submissions add constraint FK4simqb7gakc1gsi09xa9g3vp9 foreign key (question_submission_id) references question_submissions;
alter table if exists answer_options add constraint FKfapodm8kfiu9a9a4o2r43rcgp foreign key (question_id) references questions;
alter table if exists assessment_attempt_sessions add constraint FKqmjijufjlo07op89wp452fj02 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists assessment_attempt_sessions add constraint FKedviec7pyi7ow2lb1oxs3uj4w foreign key (session_id) references sessions;
alter table if exists assessment_attempts add constraint FK82558btrx0bb6s1ryii2106ya foreign key (assessment_id) references assessments;
alter table if exists assessment_attempts add constraint FKet4c09lou0jn3b8tokwoy6e0r foreign key (user_id) references users;
alter table if exists assessment_feedback add constraint FKje7h3ea4iqqyhjrm9mxd4eyle foreign key (assessment_id) references assessments;
alter table if exists assessment_feedback add constraint FK2bkrlrcdsqridudmhhxfuam8r foreign key (created_by_id) references users;
alter table if exists assessment_final_scores add constraint FK7tj4yslktdfwji9a4tag9a4xv foreign key (assessment_id) references assessments;
alter table if exists assessment_final_scores add constraint FKmf9ww2nyqn91k31c7tvbd5e6g foreign key (user_id) references users;
alter table if exists assessment_programming_exercises add constraint FKm9vfmp3efdkjm8ymvci897n4r foreign key (assessment_id) references assessments;
alter table if exists assessment_programming_exercises add constraint FKtqq1r17kknr11rdddjo0pvjf7 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists assessment_questions add constraint FKljemcscn19ij7kysiqewaqp88 foreign key (assessment_id) references assessments;
alter table if exists assessment_questions add constraint FK31e26g9p042t6hcd6jmmhti0n foreign key (question_id) references questions;
alter table if exists assessments add constraint FKovqrwbkh5e78nsujobi34n0lw foreign key (assessment_type_id) references assessment_types;
alter table if exists assessments add constraint FKa2nh608bmj0k0wjf0rw7oiha5 foreign key (course_id) references courses;
alter table if exists assessments add constraint FK6kcvtqoq34p44k1adealcw0uy foreign key (created_by_id) references users;
alter table if exists certificates add constraint FKs5rftqrsgkog7h4piv3f7a9s6 foreign key (course_id) references courses;
alter table if exists certificates add constraint FKd3f6enpb3p3xovee9klklf05r foreign key (user_id) references users;
alter table if exists comment_reactions add constraint FKfb7jmhiih0qcj4sykg2pcip35 foreign key (comment_id) references comments;
alter table if exists comment_reactions add constraint FK2t2mv78fm49m4lni9gih7kkaa foreign key (user_id) references users;
alter table if exists comments add constraint FKt7clst21fs6p4g71yf83fvw75 foreign key (forum_id) references forums;
alter table if exists comments add constraint FK8omq0tc18jd43bu5tjh6jvraq foreign key (user_id) references users;
alter table if exists course_assessments add constraint FKls5pdv9ii2eps9kwxwbw2brd0 foreign key (assessment_id) references assessments;
alter table if exists course_assessments add constraint FKbyqxymk39wrxhjjglhyjwc33f foreign key (course_id) references courses;
alter table if exists course_assessments add constraint FK9wd3cjl5w9unnmuwra76mrvuf foreign key (section_id) references sections;
alter table if exists course_materials add constraint FKjobqk7m872wjsw0y29tle6wek foreign key (course_id) references courses;
alter table if exists course_materials add constraint FK5967rhmt1i0wtna5diwc6xex8 foreign key (parent_material_id) references course_materials;
alter table if exists course_materials add constraint FK97gtx0qbuvfoy1chhqjjodi1b foreign key (section_id) references sections;
alter table if exists course_prerequisites add constraint FK2w3n61668a1jqt1y4w7we9pn0 foreign key (prerequisite_id) references courses;
alter table if exists course_prerequisites add constraint FK3o4ntlinjyx840knt9288r49f foreign key (id) references courses;
alter table if exists course_tags add constraint FKle4e0o8293pd96wrrfl77ij42 foreign key (tag_id) references tags;
alter table if exists course_tags add constraint FK2d1fjwsk2tb01ox6luxwbgv9n foreign key (id) references courses;
alter table if exists courses add constraint FK41jwvqd779kdvc0rdgij4ct17 foreign key (creator_id) references users;
alter table if exists courses add constraint FKcyfum8goa6q5u13uog0563gyp foreign key (instructor_id) references users;
alter table if exists courses add constraint FKjmewn1qtwgddy6wqn3tlt2tby foreign key (syllabus_id) references syllabi;
alter table if exists department_users add constraint FKkgpf5meu87saqtcl4my2hoq7i foreign key (department_id) references departments;
alter table if exists department_users add constraint FKnm5216tyo8yc9f7ir19hbpnsw foreign key (user_id) references users;
alter table if exists departments add constraint FKath0r2w9xsa2d6rl3ccl39bex foreign key (created_by_id) references users;
alter table if exists departments add constraint FKqsrwrq8xt10jqu1jjwpdnvnno foreign key (location_id) references locations;
alter table if exists departments add constraint FK63q917a0aq92i7gcw6h7f1jrv foreign key (parent_id) references departments;
alter table if exists departments add constraint FK508xqy4bhop64agyqlu9d0fd5 foreign key (updated_by_id) references users;
alter table if exists enrollment_status_history add constraint FKcg5euufbru7x92cn1hjyn06a3 foreign key (enrollment_id) references enrollments;
alter table if exists enrollments add constraint FKho8mcicp4196ebpltdn9wl6co foreign key (course_id) references courses;
alter table if exists enrollments add constraint FK3hjx6rcnbmfw368sxigrpfpx0 foreign key (user_id) references users;
alter table if exists exams add constraint FKr1qm93flajdaclug2fg8i7bcg foreign key (course_id) references courses;
alter table if exists forums add constraint FK272tq03u1urnl7ildohwcv6cx foreign key (course_id) references courses;
alter table if exists forums add constraint FKjb52tlir5j2fxiihqy4dv8wb7 foreign key (user_id) references users;
alter table if exists invited_candidates add constraint FKsyscf61ij63j3qqcjay26wc5u foreign key (assessment_id) references assessments;
alter table if exists material_progresses add constraint FK8jwhynhiqanuurb1cfmusb9ri foreign key (material_id) references course_materials;
alter table if exists material_progresses add constraint FKt5rc8xljhqqu3pd6ax2c39k4i foreign key (progress_id) references progresses;
alter table if exists material_progresses add constraint FKo8iikoyokf2dx5t9b1tioreqv foreign key (section_id) references sections;
alter table if exists module_function_role add constraint FKdklxhx8xkywdot33vwlgpbswj foreign key (module_function_id) references module_functions;
alter table if exists module_function_role add constraint FK9psswep7uwru20sifefbxmk7 foreign key (role_id) references roles;
alter table if exists module_function_url_permission add constraint FKtc7hbl4su44dtqfijtqo3x6qx foreign key (module_function_id) references module_functions;
alter table if exists module_function_url_permission add constraint FKkpovsrn1d44xdbkhx5r5026mt foreign key (url_pattern, http_method) references url_permissions;
alter table if exists module_functions add constraint FK56x4o7cblori2guv9bt2himrx foreign key (module_id) references modules;
alter table if exists module_functions add constraint FK5ixtta5icexo4r638qtl0gb0 foreign key (parent_module_function_id) references module_functions;
alter table if exists module_groups add constraint FKebiio8qjgvrqd2x15etcr6v9k foreign key (created_by_user_id) references users;
alter table if exists module_groups add constraint FK3jsaenqtclhehkg66nrpq1go3 foreign key (updated_by_user_id) references users;
alter table if exists module_roles add constraint FKhukr537jv4csah3avrsbhhtdy foreign key (module_id) references modules;
alter table if exists module_roles add constraint FKnfy4r5rivek7l2l6p62yx2r4y foreign key (role_id) references roles;
alter table if exists modules add constraint FK4nd0qim42w6y9xm2dmkowcpf3 foreign key (created_by_user_id) references users;
alter table if exists modules add constraint FK4p0at1wnsk1gvg8j5ux54kign foreign key (module_group_id) references module_groups;
alter table if exists modules add constraint FK6bg3fnbthd6s70umilbuncqx7 foreign key (updated_by_user_id) references users;
alter table if exists programming_exercise_categories add constraint FK5rlhlthvph8y5dufxrm9d8x57 foreign key (category_id) references categories;
alter table if exists programming_exercise_categories add constraint FKtbchn0956e1hc3vtfvxt6otdf foreign key (exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKnynmgdqwp25l8vad2y2mo83i7 foreign key (assessment_id) references assessments;
alter table if exists programming_exercise_progresses add constraint FKg7hgde49u5pamftp5g18rhw66 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_progresses add constraint FKkh3kmt7iohoc27p38hdoywnnq foreign key (progress_id) references progresses;
alter table if exists programming_exercise_submissions add constraint FKgntj0yrsch26042d1nuom5xw9 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists programming_exercise_submissions add constraint FKtmm0i3k6cfmlm0vjibvnv4te6 foreign key (programming_exercise_id) references programming_exercises;
alter table if exists programming_exercise_submissions add constraint FK8ddu7whtn138ptbtt2dhxqh60 foreign key (user_id) references users;
alter table if exists programming_exercises add constraint FKseevwjj6quclki1fs6a2uqqiy foreign key (course_id) references courses;
alter table if exists programming_exercises add constraint FKcgp6ctxvdnmv4pnnj9s1xq4o5 foreign key (programming_language_id) references programming_languages;
alter table if exists progresses add constraint FK7cf1psieibagtgxsotwivdrb5 foreign key (certificate_id) references certificates;
alter table if exists progresses add constraint FKlpk7ceejbntahokpl4lm6g8f7 foreign key (course_id) references courses;
alter table if exists progresses add constraint FKoharntf7r92091t2dt9gfgtdt foreign key (enrollment_id) references enrollments;
alter table if exists progresses add constraint FK35ar6a1hyt1ggp3kyonrqn7p4 foreign key (user_id) references users;
alter table if exists question_submissions add constraint FKs03r67b34cy9h6mhuto4h6j84 foreign key (assessment_attempt_id) references assessment_attempts;
alter table if exists question_submissions add constraint FK2pxbyfmlfhrnlcgk5n21u7387 foreign key (question_id) references questions;
alter table if exists questions add constraint FKn3gvco4b0kewxc0bywf1igfms foreign key (quiz_id) references quizzes;
alter table if exists quiz_progresses add constraint FK7ob1gnxx1ey3ul8mytvccjdmu foreign key (progress_id) references progresses;
alter table if exists quiz_progresses add constraint FKrqp6q3te0fclntsgglihjgwfq foreign key (quiz_id) references quizzes;
alter table if exists quizzes add constraint FKpxdnhxeppxx606nhyjtjyharp foreign key (course_id) references courses;
alter table if exists quizzes add constraint FKjeag10s919er9dgw4pj1bi8yy foreign key (created_by_id) references users;
alter table if exists quizzes add constraint FK7wrdax7drghl2q6amls0dqaa2 foreign key (section_id) references sections;
alter table if exists roles add constraint FKdmkr4ngbb21kad02beprkxghs foreign key (created_by_id) references users;
alter table if exists roles add constraint FKt2a1nghc5c62645o7m6udmvd foreign key (updated_by_id) references users;
alter table if exists section_progresses add constraint FKlsw0tcd7bo8x0ar4xlxr2jlo3 foreign key (progress_id) references progresses;
alter table if exists section_progresses add constraint FKfy6bnr15xbi3973vb86i2c7qd foreign key (section_id) references sections;
alter table if exists sections add constraint FK7ty9cevpq04d90ohtso1q8312 foreign key (course_id) references courses;
alter table if exists sessions add constraint FKal3r56i60d2kdvur9ek9kmyl1 foreign key (created_by_id) references users;
alter table if exists sessions add constraint FKfebpnlns9i4wo3e2gawu11y6o foreign key (session_type_id) references session_types;
alter table if exists study_log add constraint FKt4t3d8953ggmrfhxv5smsrk7b foreign key (course_material_id) references course_materials;
alter table if exists study_log add constraint FKhdnmmcgm0am5lye0we4x4a9g7 foreign key (student_id) references users;
alter table if exists syllabus_assessment_templates add constraint FKmgsf4v4ufne73eur76u3euist foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_chapters add constraint FKt1vtshdb6f2co5bk0exiop3w4 foreign key (syllabus_id) references syllabi;
alter table if exists syllabus_section_details add constraint FKnhg15g37eaul3f1tueir1n6v2 foreign key (section_id) references syllabus_sections;
alter table if exists syllabus_sections add constraint FKfeqotde51wwnr81d4r4aagi5w foreign key (chapter_id) references syllabus_chapters;
alter table if exists tags add constraint FK2eec1e6src1ea20wuj1retl8p foreign key (topic_id) references topics;
alter table if exists test_cases add constraint FK23x031deh4f7icodtgw0vhflp foreign key (programming_exercise_id) references programming_exercises;
alter table if exists users add constraint FK8nakkftyppd62ke6tv7oo5a92 foreign key (created_by_id) references users;
alter table if exists users add constraint FKp56c1712k691lhsyewcssf40f foreign key (role_id) references roles;
alter table if exists users add constraint FK6nm9u1qpw9xxphk70xr614m7n foreign key (updated_by_id) references users;
